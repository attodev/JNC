package com.tailf.jnc;

import org.xml.sax.InputSource;

import java.io.ByteArrayInputStream;

/**
 * A SAX parser, for parsing for example NETCONF messages, into a simple
 * {@link YangElement YangElement} tree.
 * <p>
 * This parser is data model aware and will try to construct classes that are
 * generated by the JNC pyang plugin.
 * <p>
 */
public class YangXMLParser extends XMLParser {
    Capabilities capabilities;

    /**
     * Constructor. Initializes the parser instance.
     */
    public YangXMLParser() throws JNCException {
        super();
    }

    @Override
    public void setCapabilities(Capabilities capabilities) {
        this.capabilities = capabilities;
    }

    /**
     * Read in an XML file, parse it using an ElementHandler as content
     * handler, and return the parsed YangElement tree.
     */
    @Override
    public YangElement readFile(String filename) throws JNCException {
        try {
            final ElementHandler handler = new ElementHandler();
            handler.capabilities = capabilities;
            parser.setContentHandler(handler);
            parser.parse(filename);
            return (YangElement) handler.top;
        } catch (final Exception e) {
            throw (JNCException) new JNCException(JNCException.PARSER_ERROR, "parse file: "
                    + filename + " error").initCause(e);
        }
    }

    public Element parse(String str, YangNsPackage... yangNsPackages) throws JNCException {
        final ByteArrayInputStream istream = new ByteArrayInputStream(
                str.getBytes());
        final InputSource is = new InputSource(istream);
        try {
            Element parse = parse(is,yangNsPackages);
            return parse;
        } catch (JNCException e) {
            throw new JNCException(JNCException.PARSER_ERROR, "parse error: "
                    + str, e);
        }
    }

    /**
     * Parses an XML string returning a configuration tree from it,
     * instantiating an ElementHandler to use as content handler.
     * 
     * @param is Input source (byte stream) where the XML text is read from
     * @param yangNsPackages
     */
    @Override
    public Element parse(InputSource is, YangNsPackage... yangNsPackages) throws JNCException {
        try {
            final ElementHandler handler = new ElementHandler();
            handler.capabilities = capabilities;
            handler.yangNsPackages = yangNsPackages;
            parser.setContentHandler(handler);
            parser.parse(is);
            return handler.top;
        } catch (final Exception e) {
            e.printStackTrace();
            throw (JNCException) new JNCException(JNCException.PARSER_ERROR,
                "parse error").initCause(e);
        }
    }

}
