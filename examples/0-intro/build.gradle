plugins {
    id 'application'
}

//https://tomgregory.com/gradle-task-inputs-and-outputs/

class PyangTask extends DefaultTask {
    @Internal
    String initMessage = 'Generating JNC classes...'

    @OutputDirectory
    File outputDir;

    @Optional
    @Input
    String yangPath = null

    @InputFiles
    File[] inputFiles;

    @TaskAction
    def generate() {
        println initMessage

//        def gen = new JavaClassGenerator()
//                        .loadFromFiles(inputFiles())
//                        .save(outputDir())

        println "Generated ${inputFiles.size()} to ${outputDir.getPath()} path ${yangPath}"
        //println "Generated "
    }
}

def genSrc1 ="${buildDir}/generated/src/gen/com/example/test"
def genSrc2 ="${buildDir}/generated/src/gen/com/example/test/inet"

def generateSources = tasks.register("generateSources") {
    outputs.dirs([genSrc1, genSrc2])
    doLast {
        def script = "pyang -p $System.env.CONFD_DIR/src/confd/yang --plugindir $JNCDir -f jnc --jnc-output ${genSrc1} ../yang/hosts.yang".execute()
        script.waitForProcessOutput(System.out, System.err)
        script = "pyang --plugindir $JNCDir -f jnc --jnc-output ${genSrc2} $System.env.CONFD_DIR/src/confd/yang/ietf-inet-types.yang".execute()
        script.waitForProcessOutput(System.out, System.err)
    }
}

tasks.register("pyang", PyangTask) {
    outputDir = new File(genSrc1)
    yangPath = "$System.env.CONFD_DIR/src/confd/yang"
    inputFiles = [new File("../yang/hosts.yang")]
}


compileJava.dependsOn(generateSources)

sourceSets.main.java.srcDirs = ['src/app', genSrc1, genSrc2]

application {
    mainClass = 'simple.Main'
}
