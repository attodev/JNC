plugins {
    id 'application'
}

//https://tomgregory.com/gradle-task-inputs-and-outputs/
class JncPyangTask extends DefaultTask {
    @OutputDirectory
    File outputDir;

    @Optional
    @Input
    String yangPath = null

    @Optional
    @Input
    String pluginDir = null

    @InputFiles
    File[] inputFiles;

    @TaskAction
    def generate() {
        // TODO check pyang is installed
        inputFiles.each { yang ->
            def script = "pyang${yangPath == null ? "" : " -p $yangPath"}${pluginDir == null ? "" : " --plugindir $pluginDir"} -f jnc --jnc-output ${outputDir} ${yang}".execute()
            script.waitForProcessOutput(System.out, System.err)
            logger.info "Generated ${yang}"
        }
        logger.info "Generated ${inputFiles.size()} to ${outputDir.getPath()} path ${yangPath}"
    }
}

assert(System.env.CONFD_DIR)

task pyang(type: JncPyangTask) {
    pluginDir = JNCDir
    outputDir = new File("${buildDir}/generated/src/gen/com/example/test")
    yangPath = "$System.env.CONFD_DIR/src/confd/yang"
    inputFiles = [new File("$project.rootDir/yang/hosts.yang")]
}

task pyang2(type: JncPyangTask) {
    pluginDir = JNCDir
    outputDir = new File("${buildDir}/generated/src/gen/com/example/test/inet")
    yangPath = "$System.env.CONFD_DIR/src/confd/yang"
    inputFiles = [new File("$System.env.CONFD_DIR/src/confd/yang/ietf-inet-types.yang")]
}

compileJava.dependsOn([pyang, pyang2])
sourceSets.main.java.srcDirs = ['src/app', pyang, pyang2] //non standard source layout

application {
    mainClass = 'simple.Main'
}
